@page "/bookin"
@inject IDbContextFactory ContextFactory;
@using BlazorBarcodeScanner.ZXing.JS

<PageTitle>BookIn</PageTitle>

<h1>Book In</h1>
<p>Use this feature to book an item in that you are returning</p>
<UserState></UserState>
<br>
@if (LoginState)
{
    <p>Scan an item to book it out</p>

    <BlazorBarcodeScanner.ZXing.JS.BarcodeReader
        ShowResult="true" 
        OnBarcodeReceived="LocalReceivedBarcodeText"
        Title="Scan Barcode from Camera"
        StartCameraAutomatically="true"
        ShowStart="false"
        ShowReset="false"
        ShowToggleTorch = "false"
        ShowVideoDeviceList="false"
        VideoWidth="200"
        VideoHeight="200"
    />
    <!--<input type="text" @bind-value="QrcodeScan" @onblur="QrCodeScanned">-->
} else {
    <p>Please login to Access Feature</p>    
}

<!-- show user error message if one is set -->
@if (userMessage != null && userMessage != "")
{
    <div class="alert alert-warning" role="alert">
        @userMessage
    </div>
}

@if (device != null)
{
    <table>
        <tr>
            <td>
                <b>QR Code - </b>@device.QRCode
            </td>
        </tr>
        <tr>
            <td>
                <b>Device Name - </b>@device.DeviceName
            </td>
        </tr>
        <tr>
            <td>
                <b>User Name - </b>@_user.Username
            </td>
        </tr>
    </table>
    <p>Please check the above details and confirm device book in</p>
    <button class="btn btn-primary" @onclick="ConfirmBookIn">Confirm</button>
}
@if (confirmation)
{
    <p>device - @devicename - booked in from user - @_user.Username</p>
}

@code {

    private string userMessage;
    private string QrcodeScan = "";
    private bool confirmation = false;
    private string devicename = "";

    private QRCodeIVM device;
    private int currentCount = 0;
    private QRCodeIVMContext? _context;
    string state;
    User _user;

    private bool LoginState;

    private void LocalReceivedBarcodeText(BarcodeReceivedEventArgs args)
    {
        this.QrcodeScan = args.BarcodeText;
        QrCodeScanned();
        StateHasChanged();
    }

    void CheckState(){
        if(LoginState){
            state = "True";
        } else {
            state = "False";
        }
    }

    private void ConfirmBookIn(){
        device.status = false;
        device.UserId = 0;
        devicename = device.DeviceName;
        _context.SaveChanges();
        device = null;
        confirmation = true;
    }

    private void QrCodeScanned(){

        device = _context.QRCodes.FirstOrDefault(x => x.QRCode == QrcodeScan);
        if (device == null)
        {
            userMessage = "Device does not exist!";
            device = null;
        }
        if (device != null && QrcodeScan != "")
        {
            if (device.status == false)
            {
                userMessage = "Device not assigned to a user";
                device = null;
            } else {
                if (_user.UserId == device.UserId)
            {
                // this is yours to book out
                userMessage = "";

            } else {
                // this is not yours
                device = null;
                userMessage = "This item is booked to another user";
            }
            }
            
        }
        
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnInitializedAsync(){
        _context = ContextFactory.GetDbContext();
        var result = await ProtectedSessionStore.GetAsync<User>("CurrentUser");
        if(result.Success){
            _user = result.Value;
            LoginState = true;
        } else {
            LoginState = false;
        }
    }

    private string GetUserName(int userid){
        if(userid == 0){
            return "-";
        } else {
            var user = _context.Users.FirstOrDefault(x => x.UserId == userid);
            return user.Username;
        }
    }

    private string GetStatus(bool status){
        if(!status){
            return "Available";
        } else {
            return "Booked Out";
        }
    }
}
