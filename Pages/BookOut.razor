@page "/bookout"
@inject IDbContextFactory ContextFactory;

<PageTitle>BookOut</PageTitle>

<h1>Book Out</h1>
<UserState></UserState>
<br>
<table class="table">
    <tr>
        <th>QR Code</th>
        <th>Device Name</th>
        <th>Status</th>
        <th>User ID</th>
    </tr>
@if (_context != null)
{
    @foreach (var item in _context.QRCodes)
    {
        <tr>
            <td>@item.QRCode</td>
            <td>@item.DeviceName</td>
            <td>@GetStatus(item.status)</td>
            <td>@GetUserName(item.UserId)</td>
        </tr>
    }
}
</table>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<button class="btn btn-primary" @onclick="CheckState">Check state</button>
<p>@state</p>

@code {

    private int currentCount = 0;
    private QRCodeIVMContext? _context;
    string state;
    User _user;

    private bool LoginState;

    void CheckState(){
        if(LoginState){
            state = "True";
        } else {
            state = "False";
        }
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnInitializedAsync(){
        _context = ContextFactory.GetDbContext();
        var result = await ProtectedSessionStore.GetAsync<User>("CurrentUser");
        if(result.Success){
            _user = result.Value;
            LoginState = true;
        } else {
            LoginState = false;
        }
    }

    private string GetUserName(int userid){
        if(userid == 0){
            return "-";
        } else {
            var user = _context.Users.FirstOrDefault(x => x.UserId == userid);
            return user.Username;
        }
    }

    private string GetStatus(bool status){
        if(!status){
            return "Available";
        } else {
            return "Booked Out";
        }
    }
}
